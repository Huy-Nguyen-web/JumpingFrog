[gd_scene load_steps=24 format=2]

[ext_resource path="res://scenes/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/Platform.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/PlatformContainer.gd" type="Script" id=3]
[ext_resource path="res://fonts/PixelFont.TTF" type="DynamicFontData" id=4]
[ext_resource path="res://fonts/score.tres" type="DynamicFont" id=5]

[sub_resource type="Shader" id=28]
code = "shader_type spatial;
render_mode unshaded;

const int pixel_size = 4; //resolution must be divisible by pixel_size

void fragment() {
	float x = float(int(FRAGCOORD.x) % pixel_size);
	float y = float(int(FRAGCOORD.y) % pixel_size);

	x = FRAGCOORD.x + floor(float(pixel_size) / 2.0) - x;
	y = FRAGCOORD.y + floor(float(pixel_size) / 2.0) - y;

	ALBEDO = texture(SCREEN_TEXTURE, vec2(x, y) / VIEWPORT_SIZE).xyz;
}
"

[sub_resource type="ShaderMaterial" id=29]
shader = SubResource( 28 )

[sub_resource type="QuadMesh" id=30]
material = SubResource( 29 )
size = Vector2( 200, 200 )

[sub_resource type="PlaneMesh" id=10]
size = Vector2( 100, 100 )
subdivide_width = 16
subdivide_depth = 16

[sub_resource type="Shader" id=8]
code = "// Wind Waker style water - NekotoArts
// Adapted from https://www.shadertoy.com/view/3tKBDz
// After which I added in some fractal Brownian motion
// as well as vertex displacement

shader_type spatial;

uniform vec4 WATER_COL : hint_color =  vec4(0.04, 0.38, 0.88, 1.0);
uniform vec4 WATER2_COL : hint_color =  vec4(0.04, 0.35, 0.78, 1.0);
uniform vec4 FOAM_COL : hint_color = vec4(0.8125, 0.9609, 0.9648, 1.0);
uniform float distortion_speed = 2.0;
uniform vec2 tile = vec2(5.0, 5.0);
uniform float height = 2.0;
uniform vec2 wave_size = vec2(2.0, 2.0);
uniform float wave_speed = 1.5;

const float M_2PI = 6.283185307;
const float M_6PI = 18.84955592;

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv) {
    int octaves = 6;
    float amplitude = 0.5;
    float frequency = 3.0;
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amplitude * noise(frequency * uv);
        amplitude *= 0.5;
        frequency *= 2.0;
    }
    return value;
}

float circ(vec2 pos, vec2 c, float s)
{
    c = abs(pos - c);
    c = min(c, 1.0 - c);

    return smoothstep(0.0, 0.002, sqrt(s) - sqrt(dot(c, c))) * -1.0;
}

// Foam pattern for the water constructed out of a series of circles
float waterlayer(vec2 uv)
{
    uv = mod(uv, 1.0); // Clamp to [0..1]
	
    float ret = 1.0;
    ret += circ(uv, vec2(0.37378, 0.277169), 0.0268181);
    ret += circ(uv, vec2(0.0317477, 0.540372), 0.0193742);
    ret += circ(uv, vec2(0.430044, 0.882218), 0.0232337);
    ret += circ(uv, vec2(0.641033, 0.695106), 0.0117864);
    ret += circ(uv, vec2(0.0146398, 0.0791346), 0.0299458);
    ret += circ(uv, vec2(0.43871, 0.394445), 0.0289087);
    ret += circ(uv, vec2(0.909446, 0.878141), 0.028466);
    ret += circ(uv, vec2(0.310149, 0.686637), 0.0128496);
    ret += circ(uv, vec2(0.928617, 0.195986), 0.0152041);
    ret += circ(uv, vec2(0.0438506, 0.868153), 0.0268601);
    ret += circ(uv, vec2(0.308619, 0.194937), 0.00806102);
    ret += circ(uv, vec2(0.349922, 0.449714), 0.00928667);
    ret += circ(uv, vec2(0.0449556, 0.953415), 0.023126);
    ret += circ(uv, vec2(0.117761, 0.503309), 0.0151272);
    ret += circ(uv, vec2(0.563517, 0.244991), 0.0292322);
    ret += circ(uv, vec2(0.566936, 0.954457), 0.00981141);
    ret += circ(uv, vec2(0.0489944, 0.200931), 0.0178746);
    ret += circ(uv, vec2(0.569297, 0.624893), 0.0132408);
    ret += circ(uv, vec2(0.298347, 0.710972), 0.0114426);
    ret += circ(uv, vec2(0.878141, 0.771279), 0.00322719);
    ret += circ(uv, vec2(0.150995, 0.376221), 0.00216157);
    ret += circ(uv, vec2(0.119673, 0.541984), 0.0124621);
    ret += circ(uv, vec2(0.629598, 0.295629), 0.0198736);
    ret += circ(uv, vec2(0.334357, 0.266278), 0.0187145);
    ret += circ(uv, vec2(0.918044, 0.968163), 0.0182928);
    ret += circ(uv, vec2(0.965445, 0.505026), 0.006348);
    ret += circ(uv, vec2(0.514847, 0.865444), 0.00623523);
    ret += circ(uv, vec2(0.710575, 0.0415131), 0.00322689);
    ret += circ(uv, vec2(0.71403, 0.576945), 0.0215641);
    ret += circ(uv, vec2(0.748873, 0.413325), 0.0110795);
    ret += circ(uv, vec2(0.0623365, 0.896713), 0.0236203);
    ret += circ(uv, vec2(0.980482, 0.473849), 0.00573439);
    ret += circ(uv, vec2(0.647463, 0.654349), 0.0188713);
    ret += circ(uv, vec2(0.651406, 0.981297), 0.00710875);
    ret += circ(uv, vec2(0.428928, 0.382426), 0.0298806);
    ret += circ(uv, vec2(0.811545, 0.62568), 0.00265539);
    ret += circ(uv, vec2(0.400787, 0.74162), 0.00486609);
    ret += circ(uv, vec2(0.331283, 0.418536), 0.00598028);
    ret += circ(uv, vec2(0.894762, 0.0657997), 0.00760375);
    ret += circ(uv, vec2(0.525104, 0.572233), 0.0141796);
    ret += circ(uv, vec2(0.431526, 0.911372), 0.0213234);
    ret += circ(uv, vec2(0.658212, 0.910553), 0.000741023);
    ret += circ(uv, vec2(0.514523, 0.243263), 0.0270685);
    ret += circ(uv, vec2(0.0249494, 0.252872), 0.00876653);
    ret += circ(uv, vec2(0.502214, 0.47269), 0.0234534);
    ret += circ(uv, vec2(0.693271, 0.431469), 0.0246533);
    ret += circ(uv, vec2(0.415, 0.884418), 0.0271696);
    ret += circ(uv, vec2(0.149073, 0.41204), 0.00497198);
    ret += circ(uv, vec2(0.533816, 0.897634), 0.00650833);
    ret += circ(uv, vec2(0.0409132, 0.83406), 0.0191398);
    ret += circ(uv, vec2(0.638585, 0.646019), 0.0206129);
    ret += circ(uv, vec2(0.660342, 0.966541), 0.0053511);
    ret += circ(uv, vec2(0.513783, 0.142233), 0.00471653);
    ret += circ(uv, vec2(0.124305, 0.644263), 0.00116724);
    ret += circ(uv, vec2(0.99871, 0.583864), 0.0107329);
    ret += circ(uv, vec2(0.894879, 0.233289), 0.00667092);
    ret += circ(uv, vec2(0.246286, 0.682766), 0.00411623);
    ret += circ(uv, vec2(0.0761895, 0.16327), 0.0145935);
    ret += circ(uv, vec2(0.949386, 0.802936), 0.0100873);
    ret += circ(uv, vec2(0.480122, 0.196554), 0.0110185);
    ret += circ(uv, vec2(0.896854, 0.803707), 0.013969);
    ret += circ(uv, vec2(0.292865, 0.762973), 0.00566413);
    ret += circ(uv, vec2(0.0995585, 0.117457), 0.00869407);
    ret += circ(uv, vec2(0.377713, 0.00335442), 0.0063147);
    ret += circ(uv, vec2(0.506365, 0.531118), 0.0144016);
    ret += circ(uv, vec2(0.408806, 0.894771), 0.0243923);
    ret += circ(uv, vec2(0.143579, 0.85138), 0.00418529);
    ret += circ(uv, vec2(0.0902811, 0.181775), 0.0108896);
    ret += circ(uv, vec2(0.780695, 0.394644), 0.00475475);
    ret += circ(uv, vec2(0.298036, 0.625531), 0.00325285);
    ret += circ(uv, vec2(0.218423, 0.714537), 0.00157212);
    ret += circ(uv, vec2(0.658836, 0.159556), 0.00225897);
    ret += circ(uv, vec2(0.987324, 0.146545), 0.0288391);
    ret += circ(uv, vec2(0.222646, 0.251694), 0.00092276);
    ret += circ(uv, vec2(0.159826, 0.528063), 0.00605293);
	return max(ret, 0.0);
}

// Procedural texture generation for the water
vec3 water(vec2 uv, vec3 cdir, float iTime)
{
    uv *= vec2(0.25);
	uv += fbm(uv) * 0.2;

    // Parallax height distortion with two directional waves at
    // slightly different angles.
    vec2 a = 0.025 * cdir.xz / cdir.y; // Parallax offset
    float h = sin(uv.x + iTime); // Height at UV
    uv += a * h;
    h = sin(0.841471 * uv.x - 0.540302 * uv.y + iTime);
    uv += a * h;
    
    // Texture distortion
    float d1 = mod(uv.x + uv.y, M_2PI);
    float d2 = mod((uv.x + uv.y + 0.25) * 1.3, M_6PI);
    d1 = iTime * 0.07 + d1;
    d2 = iTime * 0.5 + d2;
    vec2 dist = vec2(
    	sin(d1) * 0.15 + sin(d2) * 0.05,
    	cos(d1) * 0.15 + cos(d2) * 0.05
    );
    
    vec3 ret = mix(WATER_COL.rgb, WATER2_COL.rgb, waterlayer(uv + dist.xy));
    ret = mix(ret, FOAM_COL.rgb, waterlayer(vec2(1.0) - uv - dist.yx));
    return ret;
}


void vertex(){
	float time = TIME * wave_speed;
	vec2 uv = UV * wave_size;
	float d1 = mod(uv.x + uv.y, M_2PI);
    float d2 = mod((uv.x + uv.y + 0.25) * 1.3, M_6PI);
    d1 = time * 0.07 + d1;
    d2 = time * 0.5 + d2;
    vec2 dist = vec2(
    	sin(d1) * 0.15 + sin(d2) * 0.05,
    	cos(d1) * 0.15 + cos(d2) * 0.05
    );
	VERTEX.y += dist.y * height;
}

void fragment()
{
	vec2 uv = UV;
	
    ALBEDO = vec3(water(uv * tile, vec3(0,1,0), TIME * distortion_speed));
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/WATER_COL = Color( 0.04, 0.38, 0.88, 1 )
shader_param/WATER2_COL = Color( 0.04, 0.35, 0.78, 1 )
shader_param/FOAM_COL = Color( 0.8125, 0.9609, 0.9648, 1 )
shader_param/distortion_speed = 5.0
shader_param/tile = Vector2( 20, 20 )
shader_param/height = 2.0
shader_param/wave_size = Vector2( 2, 2 )
shader_param/wave_speed = 1.5

[sub_resource type="StyleBoxFlat" id=26]
bg_color = Color( 1, 1, 1, 1 )
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color( 1, 1, 1, 1 )
corner_radius_top_left = 50
corner_radius_top_right = 50
corner_radius_bottom_right = 50
corner_radius_bottom_left = 50
corner_detail = 20
expand_margin_right = 5.0
shadow_color = Color( 0.192157, 0.176471, 0.176471, 0.639216 )

[sub_resource type="StyleBoxFlat" id=27]
bg_color = Color( 0.231373, 0.223529, 0.211765, 1 )
corner_radius_top_left = 50
corner_radius_top_right = 50
corner_radius_bottom_right = 50
corner_radius_bottom_left = 50

[sub_resource type="DynamicFont" id=6]
size = 50
font_data = ExtResource( 4 )

[sub_resource type="DynamicFont" id=23]
font_data = ExtResource( 4 )

[sub_resource type="Animation" id=24]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Tutorial:custom_colors/font_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=25]
resource_name = "tutorial_fade_out"
tracks/0/type = "value"
tracks/0/path = NodePath("Tutorial:custom_colors/font_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="DynamicFont" id=1]
size = 30
font_data = ExtResource( 4 )

[sub_resource type="StyleBoxFlat" id=2]
bg_color = Color( 0, 0, 0, 1 )
border_width_left = 4
border_width_top = 4
border_width_right = 4
border_width_bottom = 4
corner_radius_top_left = 10
corner_radius_top_right = 10
corner_radius_bottom_right = 10
corner_radius_bottom_left = 10

[sub_resource type="Theme" id=3]
Button/styles/normal = SubResource( 2 )

[sub_resource type="DynamicFont" id=4]
size = 20
font_data = ExtResource( 4 )

[sub_resource type="ProceduralSky" id=19]

[sub_resource type="Environment" id=20]
background_mode = 2
background_sky = SubResource( 19 )
fog_color = Color( 0.466667, 0.513726, 0.560784, 1 )
fog_sun_color = Color( 1, 0.901961, 0.701961, 1 )
fog_depth_begin = 0.0
fog_depth_end = 40.0
fog_depth_curve = 0.965936

[node name="World" type="Spatial"]

[node name="Player" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.20233, 0 )

[node name="Camera" parent="Player" index="1"]
transform = Transform( 1, 0, 0, 0, 0.985124, 0.171843, 0, -0.171843, 0.985124, 0, 1.63411, 6.09091 )
current = true

[node name="MeshInstance" type="MeshInstance" parent="Player/Camera" index="0"]
transform = Transform( 1, 0, 0, 0, 0.985124, -0.171843, 0, 0.171843, 0.985124, -0.132704, -0.127913, -1.89804 )
mesh = SubResource( 30 )
skeleton = NodePath("../../..")

[node name="Cone 2" parent="Player/Frog" index="2"]
transform = Transform( -0.611465, 0.284638, 0.738302, -0.422017, -0.906587, -2.70184e-08, 0.669335, -0.311576, 0.67447, -1.96045, 1.35464, -3.58046 )

[node name="Cone 22" parent="Player/Frog" index="3"]
transform = Transform( 0.660495, -0.30746, 0.684992, -0.422017, -0.906586, 3.86632e-08, 0.621005, -0.289078, -0.728551, 0.772321, 1.35464, -3.60023 )

[node name="PlatformContainer" type="Spatial" parent="."]
script = ExtResource( 3 )

[node name="StartPlatform" parent="." instance=ExtResource( 2 )]

[node name="WaterShader" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.145016 )

[node name="Water" type="MeshInstance" parent="WaterShader"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.323, -25 )
mesh = SubResource( 10 )
skeleton = NodePath("../..")
material/0 = SubResource( 9 )

[node name="Water2" type="MeshInstance" parent="WaterShader"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.323, -122.846 )
mesh = SubResource( 10 )
skeleton = NodePath("../..")
material/0 = SubResource( 9 )

[node name="Water3" type="MeshInstance" parent="WaterShader"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.323, -217.291 )
mesh = SubResource( 10 )
skeleton = NodePath("../..")
material/0 = SubResource( 9 )

[node name="Water4" type="MeshInstance" parent="WaterShader"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.323, -309.382 )
mesh = SubResource( 10 )
skeleton = NodePath("../..")
material/0 = SubResource( 9 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="PowerBar" type="ProgressBar" parent="Control"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -58.0
margin_top = -28.0
margin_right = 278.0
margin_bottom = 8.0
rect_rotation = -90.0
custom_styles/fg = SubResource( 26 )
custom_styles/bg = SubResource( 27 )
value = 50.0
percent_visible = false

[node name="Score" type="Label" parent="Control"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -22.0
margin_top = 130.0
margin_right = 18.0
margin_bottom = 181.0
custom_fonts/font = SubResource( 6 )

[node name="Tutorial" type="Label" parent="Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -91.0
margin_top = -8.5
margin_right = 91.0
margin_bottom = 8.5
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 23 )
text = "touch to start"

[node name="AnimationPlayer" type="AnimationPlayer" parent="Control"]
anims/RESET = SubResource( 24 )
anims/tutorial_fade_out = SubResource( 25 )

[node name="Popup" type="Popup" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -173.0
margin_top = -190.5
margin_right = 173.0
margin_bottom = 190.5
popup_exclusive = true

[node name="Panel" type="Panel" parent="Popup"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="GameOverLabel" type="Label" parent="Popup/Panel"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -169.0
margin_right = 170.0
margin_bottom = 96.0
custom_fonts/font = SubResource( 1 )
text = "GAME OVER"
align = 1
valign = 1

[node name="PlayAgainButton" type="Button" parent="Popup"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -82.0
margin_top = 102.0
margin_right = 97.0
margin_bottom = 146.0
theme = SubResource( 3 )
custom_fonts/font = SubResource( 4 )
text = "try again?"

[node name="VBoxContainer" type="VBoxContainer" parent="Popup"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -107.0
margin_top = -68.0
margin_right = 107.0
margin_bottom = 68.0

[node name="ScoreLabel" type="Label" parent="Popup/VBoxContainer"]
margin_right = 214.0
margin_bottom = 31.0
custom_fonts/font = ExtResource( 5 )
text = "Score"
align = 1
valign = 1

[node name="Score" type="Label" parent="Popup/VBoxContainer"]
margin_top = 35.0
margin_right = 214.0
margin_bottom = 66.0
custom_fonts/font = ExtResource( 5 )
align = 1
valign = 1

[node name="HighscoreLabel" type="Label" parent="Popup/VBoxContainer"]
margin_top = 70.0
margin_right = 214.0
margin_bottom = 101.0
custom_fonts/font = ExtResource( 5 )
text = "highscore"
align = 1
valign = 1

[node name="Highscore" type="Label" parent="Popup/VBoxContainer"]
margin_top = 105.0
margin_right = 214.0
margin_bottom = 136.0
custom_fonts/font = ExtResource( 5 )
align = 1
valign = 1

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 20 )

[node name="DebugCamera" type="Camera" parent="."]
transform = Transform( -0.175401, 0, 0.984497, 0, 1, 0, -0.984497, 0, -0.175401, 82.4782, 23.6427, 0 )
fov = 88.9

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3.82693, 35.1967, 0.53334 )
directional_shadow_mode = 1

[connection signal="create_platform" from="Player" to="PlatformContainer" method="_on_Player_create_platform"]
[connection signal="pressed" from="Popup/PlayAgainButton" to="Player" method="_on_PlayAgainButton_pressed"]

[editable path="Player"]
[editable path="Player/Frog"]
